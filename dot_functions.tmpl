#!/bin/bash
mkcd() { mkdir -p "$@" && cd "$_"; }
scratch() { mkdir -p "/tmp/scratchfolder" && cd "/tmp/scratchfolder" }
sman() { curl cht.sh/$1 }
bw() { /usr/bin/bw --session $(cat {{ .bwSessionPath }}) $@ }
okctl() { $(ovm current -p) $@ }
netup() { sudo netctl start $1 && sudo netctl wait-online $1 }
passgen() { pwgen -sync $1 | cut -d' ' -f1 | wl-copy -n }

##################################################
##### Helm
##################################################
#h() {
#  # Gotten from Yngvar Kristiansen
#  CURRENT_NAMESPACE=`kubectl config view --minify --output 'jsonpath={..namespace}'`
#  echo Using namespace for helm: $CURRENT_NAMESPACE
#  helm --tiller-namespace=$CURRENT_NAMESPACE $@
#}
h() {
  CURRENT_NAMESPACE=`kubectl config view --minify --output 'jsonpath={..namespace}'`
  echo Using namespace for helm: $CURRENT_NAMESPACE
  /usr/bin/helm --namespace=$CURRENT_NAMESPACE $@
}

##################################################
##### Kubernetes
##################################################
#alias kset2="export KUBECONFIG=~/.kube/configs/$1.yaml"
kset() {
  export KUBECONFIG=~/.kube/configs/$1.yaml
}
ksethere() {
	export KUBECONFIG=${PWD}/kubeconfig.yaml
}
knset() {
  export KUBENAMESPACE=$1
}

##################################################
##### Docker
##################################################
prunedocker() {
	docker stop $(docker ps -q) &> /dev/null # Stops all running containers
	docker rm $(docker ps -aq)  &> /dev/null # Removes all containers
	docker rmi -f $(docker images -aq) &> /dev/null # Removes all images
	docker system prune --volumes # Removes most docker data
}

swagger-local() {
  if [ $# -ne 1 ]; then
    echo "Usage: swagger-local [FILE]"
    echo "Example: swagger-local specification.yaml"
    return 1
  fi

  docker run \
    --publish 8080:80 \
    --env SPEC_URL=/spec/openapi.yaml \
    --volume $(pwd)/$1:/usr/share/nginx/html/spec/openapi.yaml \
    redocly/redoc
}

##################################################
##### Git
##################################################
git_main_branch() {
  git branch | cut -c 3- | grep -E '^master$|^main$'
}

gdf() {
	if [ -z "$1" ]; then
		    echo "usage: $0 number_of_commits"
	fi

	git diff --name-only HEAD~$1 HEAD | cat
}

ghpr() {
  branch=$(git rev-parse --abbrev-ref HEAD | sed 's/-/ /g')

  gh pr create --title="${branch}" --editor
}

yolo() {
	current=`git branch --show-current`

	if [[ "${current}" == "master" ]]; then
		echo "careful! no yoloing on master"

		return 1
	fi

	if [[ "${current}" == "main" ]]; then
		echo "careful! no yoloing on main"

		return 1
	fi

	echo "LEEEEEEROY"

	git push -f
}

gwip() {
	current=`git branch --show-current`

	if [[ "${current}" == "master" ]]; then
		echo "No WIP commits on master"

		return 1
	fi

	if [[ "${current}" == "main" ]]; then
		echo "No WIP commits on main"

		return 1
	fi

  git commit -m'ðŸš§ WIP' && git push
}

gcom() {
  git checkout $(git_main_branch)
}

grib() {
  git rebase -i $(git_main_branch)
}
##################################################
##### AWS
##################################################
profile-select() {
    export AWS_PROFILE=$(aws configure list-profiles | fzf)
}

taillog() {
  local logGroup=$(aws logs describe-log-groups | jq -r '.logGroups[].logGroupName' | fzf)

  aws logs tail --follow ${logGroup}
}

scale() {
  if [ -z "$1" ]; then
    echo "Usage: scale <instances>"
    return 1
  fi
  local desired=$1

  # Get all clusters (one per line)
  local clusters
  clusters=$(aws ecs list-clusters --query 'clusterArns[]' --output text | tr '\t' '\n')

  # Get all services per cluster, format "cluster:service"
  local selection
  selection=$(for c in $clusters; do
      aws ecs list-services --cluster "$c" --query 'serviceArns[]' --output text \
        | tr '\t' '\n' \
        | sed -E "s-^arn:aws:ecs:[^:]+:[0-9]+:service/([^/]+)/(.+)-\1:\2-"
    done \
    | fzf --prompt="Select ECS service to scale > ")

  if [ -z "$selection" ]; then
    echo "No service selected"
    return 1
  fi

  local cluster service
  cluster=$(echo "$selection" | cut -d: -f1)
  service=$(echo "$selection" | cut -d: -f2-)

  echo "Scaling service '$service' in cluster '$cluster' to $desired tasks..."
  aws ecs update-service --cluster "$cluster" --service "$service" --desired-count "$desired"
}
##################################################
##### Port forwarding
##################################################
ksyncthing() {
	NAME=$(kubectl -n personal get pods | grep syncthing | cut -d' ' -f1)

	kubectl -n personal port-forward ${NAME} 8000:8384
}

kargocd() {
	kubectl -n argocd port-forward svc/argocd-server 8000:443
}

gwc() {
    targetDir=$(basename $1 | cut -d'.' -f1)

    mkdir -p $targetDir
    cd $targetDir

    git clone --bare $1 .bare
    echo "gitdir: ./.bare" > .git
}

bwlogin() {
  /usr/bin/bw login {{ .bwEmail }} --raw > {{ .bwSessionPath }} || \
    /usr/bin/bw unlock --raw > {{ .bwSessionPath }}
}

work() {
  set-work-profile
  sudo netctl start origo-psk
}

home() {
  set-laptop-profile
  sudo netctl start home
}

dnm() {
  git diff $(git diff --name-only | head -1)
}

zactivate() {
  zellij action rename-tab code
  zellij action new-tab -n console
  zellij action move-tab left
}

nvim-config-cleaner() {
  rm -rf ${HOME}/.local/share/nvim
  rm -rf ${HOME}/.local/state/nvim
  rm -rf ${HOME}/.cache/nvim
}
